let board = [];
let fixed = [];
let sizeCell;
let r = -1, c = -1;
let lines;
let message = "";

function preload() {
    lines = loadStrings("sudoku.txt");
}

function setup() {
    createCanvas(600, 650);
   sizeCell = width / 9;
   startGame();
}

function draw() {
    background(255);
    drawGrid();
    highlightSelected();
    drawNumbers();
    drawMessage();
  
    if (checkWin()) {
      fill(0, 255, 127);
      textSize(50);
      textAlign(CENTER, CENTER);
      text("You Win!", width / 2, 300);
      noLoop();
  }
}


function startGame() {
  loadGame();
  r = -1;
  c = -1;
  message = "";
}

function loadGame() {
  board = [];
  fixed = [];
  for (let i = 0; i < 9; i++) {
    let nums = lines[i].split(' ').map(n => int(n));
    board[i] = [];
    fixed[i] = [];
    for (let j = 0; j < 9; j++) {
      board[i][j] = nums[j];
      fixed[i][j] = (nums[j] !== 0);
    }
  }
}

function mousePressed() {
      let mx = mouseX;
  let my = mouseY;
    let rowS = floor(my / sizeCell);
  let colS = floor(mx / sizeCell);
  if (rowS >= 0 && rowS < 9 && colS >= 0 && colS < 9) {
    r = rowS;
    c = colS;
  }
}

function drawMessage() {
  if (message !== "") {
    fill(138, 43, 226);
    textSize(24);
    textAlign(CENTER, CENTER);
    text(message, width / 2, sizeCell * 9 + 25);
  }
}

function keyPressed() {
 if (r !== -1 && c !== -1 && !fixed[r][c]) {
    if (key >= '1' && key <= '9') {
      let val = int(key);
      if (checkValid(r, c, val)) {
        board[r][c] = val;
        message = "";
      } else { //(`ใส่ไม่ได้ที่แถว ${r+1} ช่อง ${c+1}`);
        message = `ใส่ไม่ได้ที่แถว ${val} ช่อง (${r + 1}, ${c + 1})`;
      }
    } else if (keyCode === BACKSPACE || keyCode === DELETE || key === '0') {
      board[r][c] = 0;
      message = "";
    }
  }
}


function parseBoard(lines) {
  board = Array.from({ length: 9 }, () => Array(9).fill(0));
  fixed = Array.from({ length: 9 }, () => Array(9).fill(false));

  let row = 0;
  for (let i = 0; i < lines.length && row < 9; i++) {
    let line = lines[i].trim();
    if (line.length > 0) {
      let nums = line.split(/\s+/);
      for (let j = 0; j < 9; j++) {
        let val = int(nums[j]);
        board[row][j] = val;
        if (val !== 0) fixed[row][j] = true;
      }
      row++;
    }
  }
}


function checkValid(row, col, val) {
  for (let i = 0; i < 9; i++) {
    if (board[row][i] === val) return false;
    if (board[i][col] === val) return false;
  }

  let startR = floor(row / 3) * 3;
  let startC = floor(col / 3) * 3;
  for (let i = 0; i < 3; i++) {
    for (let j = 0; j < 3; j++) {
      if (board[startR + i][startC + j] === val) return false;
    }
  }
  return true;
}


function checkWin() {
  for (let i = 0; i < 9; i++) {
    for (let j = 0; j < 9; j++) {
      let val = board[i][j];
      if (val === 0) return false;
      board[i][j] = 0;
      if (!checkValid(i, j, val)) {
        board[i][j] = val;
        return false;
      }
      board[i][j] = val;
    }
  }
  return true;
}


function drawGrid() {
  for (let i = 0; i <= 9; i++) {
    stroke(136, 134, 130);
    strokeWeight(i % 3 === 0 ? 3 : 1);
    line(i * sizeCell, 0, i * sizeCell, sizeCell*9);
    line(0, i * sizeCell, sizeCell*9, i * sizeCell);
  }
}


function drawNumbers() {
  textAlign(CENTER, CENTER);
  textSize(24);
  stroke(0,0,0);
  for (let i = 0; i < 9; i++) {
    for (let j = 0; j < 9; j++) {
      if (board[i][j] !== 0) {
        if (fixed[i][j]){
          fill(0,0,0);
          stroke(0,0,0);
        }else fill(30, 144, 255);
        text(board[i][j], j * sizeCell + sizeCell / 2, i * sizeCell + sizeCell / 2);
      }
    }
  }
}


function highlightSelected() {
  if (r !== -1 && c !== -1 && r < 9 && c < 9) {
    fill(240, 255, 255);
    stroke(65, 105, 225);
    strokeWeight(3);
    rect(c * sizeCell, r * sizeCell, sizeCell, sizeCell);
  }
}

