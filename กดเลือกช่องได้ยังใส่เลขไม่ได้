let board = [];
let fixed = [];
let sizeCell = 56;
let r = -1, c = -1;
let lines;

function preload() {
    lines = loadStrings("sudoku.txt");
}

function setup() {
    createCanvas(9 * sizeCell, 9 * sizeCell);
    parseBoard(lines);
}

function draw() {
    background(255);
    drawGrid();
    highlightSelected();
    drawNumbers();

  if (checkWin()) {
      fill(0, 150, 0);
      textSize(32);
      textAlign(CENTER, CENTER);
      text("You Win!", width / 2, height / 2);
      noLoop();
  }
}

function mousePressed() {
    r = floor(mouseY / sizeCell);
    c = floor(mouseX / sizeCell);
}

function keyPressed() {
  if (r !== -1 && c !== -1 && !fixed[r][c]) {
    if (keyCode === BACKSPACE || keyCode === DELETE || key === '0') {
      board[r][c] = 0;
    } else {
      let val = int(key);
      if (val >= 1 && val <= 9) {
        if (board[r][c] === 0) {
          if (checkValid(r, c, val)) {
            board[r][c] = val;
          } else {
            console.log(`ใส่ไม่ได้ที่แถว ${r} ช่อง ${c}`);
          }
        }
      }
    }
  }
}


function parseBoard(lines) {
  board = Array.from({ length: 9 }, () => Array(9).fill(0));
  fixed = Array.from({ length: 9 }, () => Array(9).fill(false));

  let row = 0;
  for (let i = 0; i < lines.length && row < 9; i++) {
    let line = lines[i].trim();
    if (line.length > 0) {
      let nums = line.split(/\s+/);
      for (let j = 0; j < 9; j++) {
        let val = int(nums[j]);
        board[row][j] = val;
        if (val !== 0) fixed[row][j] = true;
      }
      row++;
    }
  }
}


function checkValid(row, col, val) {
  for (let i = 0; i < 9; i++) {
    if (board[row][i] === val) return false;
    if (board[i][col] === val) return false;
  }

  let startR = floor(row / 3) * 3;
  let startC = floor(col / 3) * 3;
  for (let i = 0; i < 3; i++) {
    for (let j = 0; j < 3; j++) {
      if (board[startR + i][startC + j] === val) return false;
    }
  }
  return true;
}


function checkWin() {
  for (let i = 0; i < 9; i++) {
    for (let j = 0; j < 9; j++) {
      let val = board[i][j];
      if (val === 0) return false;
      board[i][j] = 0;
      if (!checkValid(i, j, val)) {
        board[i][j] = val;
        return false;
      }
      board[i][j] = val;
    }
  }
  return true;
}


function drawGrid() {
  for (let i = 0; i <= 9; i++) {
    strokeWeight(i % 3 === 0 ? 3 : 1);
    line(i * sizeCell, 0, i * sizeCell, height);
    line(0, i * sizeCell, width, i * sizeCell);
  }
}


function drawNumbers() {
  textAlign(CENTER, CENTER);
  textSize(24);
  for (let i = 0; i < 9; i++) {
    for (let j = 0; j < 9; j++) {
      if (board[i][j] !== 0) {
        if (fixed[i][j]) fill(0);
        else fill(50, 50, 200);
        text(board[i][j], j * sizeCell + sizeCell / 2, i * sizeCell + sizeCell / 2);
      }
    }
  }
}


function highlightSelected() {
  if (r !== -1 && c !== -1) {
    fill(255, 242, 225);
    stroke(255, 0, 0);
    strokeWeight(3);
    rect(c * sizeCell, r * sizeCell, sizeCell, sizeCell);
  }
}
